<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sass | Felippe Nardi]]></title>
  <link href="http://felippenardi.github.io/blog/categories/sass/atom.xml" rel="self"/>
  <link href="http://felippenardi.github.io/"/>
  <updated>2013-07-16T21:43:22+00:00</updated>
  <id>http://felippenardi.github.io/</id>
  <author>
    <name><![CDATA[Felippe Nardi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Top 5 core differences between Bootstrap and Foundation]]></title>
    <link href="http://felippenardi.github.io/blog/2013/07/16/bootstrap-vs-foundation-here-are-the-core-differences-between-them/"/>
    <updated>2013-07-16T19:31:00+00:00</updated>
    <id>http://felippenardi.github.io/blog/2013/07/16/bootstrap-vs-foundation-here-are-the-core-differences-between-them</id>
    <content type="html"><![CDATA[<p><strong>Developers</strong>, use Bootstrap. <strong>Front-enders</strong>, use Foundation.</p>

<p>The rest of this article just explains <em>why</em>.</p>

<hr />

<p>There are significant <strong>core differences</strong> between <strong>Bootstrap</strong> and <strong>Foundation</strong>, but if I can give you just <strong>ONE thing to remember</strong>, that thing is:</p>

<blockquote><p><strong>Zurb and Twitter made their objectives and intentions very clear when naming each CSS Frameworks:</strong> Bootstrap will have <em>everything</em> you&rsquo;ll ever need <em>to bootstrap</em> your project. Foundation will have <em>the least of things</em> you will ever need <em>as foundation</em> for your project.</p></blockquote>

<p>Keep this in mind while I list you 5 of the core differences between both CSS Framework:</p>

<h3>1- UI Elements</h3>

<h4>Foundation have a very limited number of UI elements, Bootstrap have almost everything you can imagine.</h4>

<p>Zurb&rsquo;s intention with Foundation was NOT to make all the web look the same with pre-designed UI elements.</p>

<p>On the other hand, Bootstrap will give almost every UI element you can think of.</p>

<h3>2- EMs VS Pixels</h3>

<h4>Foundation use EMs and Bootstraps use pixels.</h4>

<p>Using pixels means you will have to explicit declare a height, width, padding, margin of a component (and it&rsquo;s nested element) on EVERY target device and screen size you want to give it a different look using media queries.</p>

<p>Using <em>EMs</em> means you can just state <code>font-size: 80%;</code> and have the whole component (and it&rsquo;s nested elements) shrinked by 20%.</p>

<p>It&rsquo;s also worth mentioning that you can leave details you don&rsquo;t want to change in pixels, so only <em>EMs</em> units will be bonded to the font-size property.</p>

<p>Foundation will give you a sass mixin to convert pixels to <em>EMs</em>, so you can still think in pixels and end up with scalable em.</p>

<pre><code>.element {
    width: emCalc(10px); // will be converted to EMs
}
</code></pre>

<h3>3- Flexible Grid VS Pre-defined Grids</h3>

<h4>Foundation&rsquo;s grid shrinks and stretchs according to the current browser width. Bootstrap has a pre-defined set of grid sizes for main devices and screens.</h4>

<p>Bootstrap will change it&rsquo;s grid like a transformer while resizing the browser width.</p>

<p>Foundation&rsquo;s flexible grid will adapt itself to the current browser width, that is what they call layout will morth like a Transformer while resizing the browser width.</p>

<p>Foundation has two main points where the grid will change: small and large. Everything in between is shriknked and stretched to match the current browser width. No pre-defined screensizes, and the main reason of existing two points for the grid to change, is to encorage you to display columns differently for small and larger screens.</p>

<p>With Bootstrap you get can get a fixed or a fluid grid, that means respectively setting or not a pre-defined width to the grid container.</p>

<p>Using Foundation with Sass, you can change the size of your largest grid (and the smaller ones are automatically calculated), the number of columns for large screens, the number of columns for small screens and the column gutter for each.</p>

<h3>4- Mobile First VS Mobile Also</h3>

<h4>Foundation was designed for ANY four corners screen. Bootstrap was designed for mobile, tablet, desktop and large desktops.</h4>

<p>Building sites for mobile first means it will ALWAYS be usable on bigger screens. Because of this, Foundation encourages you to start this way.</p>

<p>If you use Foundation&rsquo;s sass media query mixins, you will notice that no media query means what it will look on mobile and, on top of that, you use media queries to define what will look like on larger screens.</p>

<p>Bootstrap responsiveness was added as a feature in later versions. You get some special media queries for different screen sizes, but the main target is the desktop.</p>

<p>Designing things for desktop first may make it difficult for you to arrange your content on smaller screens, while mobile first helps you focus on what is most important content for the user, and enhance the experience as there is space too.</p>

<h3>5- Community</h3>

<h4>Bootstrap has the larger community. You&rsquo;ll have to get your hands dirty when using Foundation.</h4>

<p>Something very nice about Bootstrap is the community. It is huge, and everywhere you look around you&rsquo;ll find a gem or component built for Bootstrap.</p>

<p>If you are going with Foundation, getting your hands dirty is something you&rsquo;ll have to get used to. Almost all solutions are made for Bootstrap so you&rsquo;ll mostly like have to build your own.</p>

<h2>Conclusion</h2>

<p>Ask your self those questions: Do you want <strong>something easy to use and ready</strong> to make your web app come to life? Or do you rather <strong>plan your CSS carefully</strong> and have the least you need to use as base for your project?</p>

<p>The answer is: <strong>Bootstrap</strong>. <strong>Foundation</strong>. Respectively.</p>
]]></content>
  </entry>
  
</feed>
